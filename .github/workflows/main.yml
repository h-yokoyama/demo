# This is a basic workflow to help you get started with Actions

name: Deploy ec2

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ENVIRONMENT: prod
  EC2_USER: 'ec2-user'
  EC2_HOST: 3.115.214.155
  SRC_PATH: 'target/*.war'
  DEST_DIR: '/usr/share/tomcat/webapps'

  APP_NAME: 'demo'
  JAVA_VERSION: '1.8'
  JAVA_OPTS: '-Xms1024M -Xmx1024M'
  RUN_ARGS: '--spring.profiles.active=prod'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: setup Node 
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: 'https://registry.npmjs.org'
      - name: install can-npm-publish and dependencies and build
        run: |
          cd ./web
          npm install can-npm-publish
          npm ci
          npm run build

      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true --file pom.xml
      
      - name: mkdir & copy artifacts
        run: mkdir ${{ env.ENVIRONMENT }} && cp ${{ env.SRC_PATH }} ${{ env.ENVIRONMENT }}

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}
          path: ${{ env.ENVIRONMENT }}
      
      - name: Scp ec2 copy war file
        env:
          PRIVATE_KEY: ${{ secrets.AWS_APPSRV1_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key ${{ env.SRC_PATH }} ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/${{ env.APP_NAME }}.war
          scp -o StrictHostKeyChecking=no -i private_key -r ./web/dist ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/index
          ssh -t -o StrictHostKeyChecking=no -i private_key ${{ env.EC2_USER }}@${{ env.EC2_HOST}} "sudo mv /home/${{ env.EC2_USER }}/${{ env.APP_NAME }}.war ${{ env.DEST_DIR }}" && sudo cp -rp /home/${{ env.EC2_USER }}/index/* /usr/share/nginx/html/demo/"

      - name: Ssh ec2 reestart tomcat
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.AWS_APPSRV1_PRIVATE_KEY }}
          username: ${{ env.EC2_USER }}
          host: ${{ env.EC2_HOST }}
          script: |
            echo "===== application (re)start ====="
            if sudo systemctl status tomcat 2>&1 | grep "Active: active (running)" ; then
              echo "${{ env.APP_NAME }} app restart!!"
              sudo systemctl restart tomcat
            else
              echo "${{ env.APP_NAME }} app start!!"
              sudo systemctl start tomcat
            fi
